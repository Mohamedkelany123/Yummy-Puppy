include leaf_makefile.vars


CUR_DIR=$(shell pwd)
BIN_DIR=$(subst sources,bin,$(CUR_DIR))
OBJ_DIR=$(subst sources,objects,$(CUR_DIR))
SRC = $(wildcard $(CUR_DIR)/*.cpp)

#-----------------------------------------------------------------------
#Generating Bin Executables

BINS = $(patsubst $(CUR_DIR)/%.cpp, $(BIN_DIR)/%, $(SRC))

ALL_OBJECTS = $(shell find $(HOME_PATH) ! -path "*/applications/*" ! -path "*/poco/*" -name "*.cpp.o")

IS_SUBMODULE := $(shell git rev-parse --show-superproject-working-tree)
ifneq ($(strip $(IS_SUBMODULE)),)
	SUBMODULE_PATH = $(shell git rev-parse --show-toplevel)
	ALL_OBJECTS += $(shell find $(SUBMODULE_PATH) -name "*.cpp.o" )
endif

$(BIN_DIR)/%: $(OBJ_DIR)/%.cpp.oo $(ALL_CPP)
	$(GCC) -std=c++17 $(LIBS) $(ALL_OBJECTS) $< -o $@ $(LINKER_FLAGS)

$(BIN_DIR):
	@mkdir -p $(BIN_DIR)

build_tree_bin: $(BIN_DIR)
	@echo "Tree Built"

target: build_tree_bin $(BINS)

#-----------------------------------------------------------------------
#Generating object files for executables

OBJS = $(patsubst $(CUR_DIR)/%.cpp, $(OBJ_DIR)/%.cpp.oo, $(SRC))

$(OBJ_DIR)/%.cpp.oo: $(CUR_DIR)/%.cpp $(ALL_H)
	$(GCC) -D SKIP_ENTRY_POINT $(GCC_FLAGS) $(INCLUDES) $(LEDGERINCLUDES) $< -o $@
$(OBJ_DIR):
	@mkdir -p $(OBJ_DIR)

build_tree: $(OBJ_DIR)
	@echo "Tree Built"

make_target_cpp: build_tree $(OBJS)

#--------------------------------------------------------------------

clean:
	rm -rf $(OBJ_DIR)/*
	rm -rf $(BIN_DIR)/*
